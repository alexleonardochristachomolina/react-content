{"version":3,"sources":["components/Header.js","components/Footer.js","components/PageSection.js","components/PageHero.js","components/ComponentRenderer.js","parsers/index.js","pages/HookPage.js","pages/Page.js","components/DocsNav.js","pages/DocsPage.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","href","Footer","target","rel","Date","getFullYear","PageSection","title","description","documentToReactComponents","PageHero","props","ComponentRenderer","data","map","component","index","Component","Components","sys","contentType","id","key","fields","filter","pageParser","items","length","slug","name","components","HookPage","useContentful","parser","query","loading","error","console","Page","directory","match","DocsNav","DocsPage","contentfulClient","ContentfulClient","accessToken","space","App","render","client","basename","path","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.723290c3.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Header = () => (\n  <header className=\"App-header\">\n    <Link to=\"/\"><h1>react-contentful</h1></Link>\n    <a href=\"https://github.com/ryanhefner/react-contentful\">View on GitHub</a>\n  </header>\n);\n\nexport default Header;\n","import React from 'react';\n\nconst Footer = () => (\n  <footer className=\"App-footer\">\n    <div className=\"App-footer__copyright-license\">\n      <p className=\"license\">License: <a href=\"https://opensource.org/licenses/MIT\"  target=\"_blank\" rel=\"noopener noreferrer\">MIT</a></p>\n      <p className=\"copyright\">&copy; 2019-{(new Date()).getFullYear()} - <a href=\"https://ryanhefner.com\" target=\"_blank\" rel=\"noopener noreferrer\">Ryan Hefner</a></p>\n    </div>\n  </footer>\n);\n\nexport default Footer;\n","import React from 'react';\nimport { documentToReactComponents } from '@contentful/rich-text-react-renderer';\n\nconst PageSection = ({ className = '', title = 'Title', description }) => (\n  <section className={`App__page-section ${className}`}>\n    <h2 className=\"App__page-section__title\">{title}</h2>\n    {description && (\n      <div className=\"App__page-section__description\">\n        {documentToReactComponents(description)}\n      </div>\n    )}\n  </section>\n);\n\nexport default PageSection;\n","import React from 'react';\nimport PageSection from './PageSection';\n\nconst PageHero = (props) => (\n  <PageSection\n    className=\"App__page-hero\"\n    {...props}\n  />\n);\n\nexport default PageHero;\n","import React from 'react';\nimport * as Components from './ContentfulComponents';\n\nconst ComponentRenderer = (props) => {\n  const {\n    data,\n  } = props;\n\n  return data.map((component, index) => {\n    const Component = Components[component.sys.contentType.sys.id];\n\n    if (!Component) {\n      return null;\n    }\n\n    return (\n      <Component\n        key={`component-${component.sys.id}-${index}`}\n        {...component.fields}\n      />\n    );\n  })\n  .filter(component => component !== null);\n};\n\nexport default ComponentRenderer;\n","const pageParser = (data) => {\n  if (!data.items || !data.items.length) {\n    return null;\n  }\n\n  const pageData = data.items[0];\n\n  const {\n    slug,\n    name,\n    components,\n  } = pageData.fields;\n\n  return {\n    slug,\n    name,\n    components,\n  };\n};\n\nconst pageSectionParser = (data) => {\n  const {\n    title,\n    description,\n    copyComponents,\n    refComponents,\n  } = data.fields;\n\n  return {\n    title,\n    description,\n    copyComponents,\n    refComponents,\n  };\n};\n\nexport {\n  pageParser,\n  pageSectionParser,\n};\n","import React from 'react';\nimport { useContentful } from 'react-contentful';\nimport ComponentRenderer from '../components/ComponentRenderer';\nimport { pageParser } from '../parsers';\n\nconst HookPage = (props) => {\n  const { loading, data, error } = useContentful({\n    contentType: 'Page',\n    parser: pageParser,\n    query: {\n      'fields.slug[in]': '/'\n    }\n  });\n\n  if ((!data && !error) || loading) {\n    return null;\n  }\n\n  if (error) {\n    console.error(error);\n    return null;\n  }\n\n  if (!data) {\n    return <p>Page does not exist.</p>;\n  }\n\n  return (\n    <article className=\"App-page\">\n      <ComponentRenderer {...props} data={data.components} />\n    </article>\n  );\n};\n\nexport default HookPage;\n","import React from 'react';\nimport { Query } from 'react-contentful';\nimport ComponentRenderer from '../components/ComponentRenderer';\nimport { pageParser } from '../parsers';\n\nconst Page = (props) => (\n  <Query\n    contentType=\"Page\"\n    parser={pageParser}\n    query={{\n      'fields.slug[in]': `/${props.directory || ''}${props.match.slug || ''}`,\n    }}\n   >\n    {({data, error, loading}) => {\n      if ((!data && !error) || loading) {\n        return null;\n      }\n\n      if (error) {\n        console.error(error);\n        return null;\n      }\n\n      if (!data) {\n        return <p>Page does not exist.</p>;\n      }\n\n      return (\n        <article className=\"App-page\">\n          <ComponentRenderer {...props} data={data.components} />\n        </article>\n      );\n    }}\n  </Query>\n);\n\nexport default Page;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst DocsNav = () => (\n  <nav className=\"Docs-nav\">\n    <NavLink to=\"/docs\">Getting Started</NavLink>\n    <NavLink to=\"/docs/client\">ContentfulClient</NavLink>\n    <NavLink to=\"/docs/provider\">ContenfulProvider</NavLink>\n    <NavLink to=\"/docs/query\">Query</NavLink>\n  </nav>\n);\n\nexport default DocsNav;\n","import React from 'react';\nimport Page from './Page';\nimport DocsNav from '../components/DocsNav';\n\nconst DocsPage = (props) => (\n  <div className=\"Docs\">\n    <DocsNav />\n    <div className=\"Docs-page\">\n      <Page {...props} directory=\"docs/\" />\n    </div>\n  </div>\n);\n\nexport default DocsPage;\n","import React, { Component } from 'react';\nimport { ContentfulClient, ContentfulProvider } from 'react-contentful';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport HookPage from './pages/HookPage';\nimport Page from './pages/Page';\nimport DocsPage from './pages/DocsPage';\nimport './App.css';\n\nconst contentfulClient = new ContentfulClient({\n  accessToken: '23b20723ef0ffdc1f0e123e8fb76cffeacac8ec8b9199ed3e384cc37cf2256b7',\n  space: 'nh6zyt31q7gz',\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ContentfulProvider client={contentfulClient}>\n        <Router basename={process.env.NODE_ENV === 'production' ? '/react-contentful' : '/'}>\n          <div className=\"App\">\n            <Header />\n            <div className=\"App-pageWrapper\">\n              <Switch>\n                <Route path=\"/docs/:slug*\" component={DocsPage} />\n                <Route path=\"/hook\" component={HookPage} />\n                <Route path=\"/:slug*\" component={Page} />\n              </Switch>\n            </div>\n            <Footer />\n          </div>\n        </Router>\n      </ContentfulProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}